{
    "componentChunkName": "component---src-pages-components-text-input-accessibility-mdx",
    "path": "/components/text-input/accessibility/",
    "result": {"pageContext":{"frontmatter":{"title":"Text input","description":"Text inputs enable the user to interact with and input content and data. This component can be used for long and short form entries.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/text-input/accessibility.mdx","titleType":"prepend","MdxNode":{"id":"b8ad31be-8b9d-5184-b6d2-d0434e395390","children":[],"parent":"f83b13c0-d99d-5617-8dc2-18d075f81871","internal":{"content":"---\ntitle: Text input\ndescription:\n  Text inputs enable the user to interact with and input content and data. This\n  component can be used for long and short form entries.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\nimport {\n  StructuredListWrapper,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListRow,\n  StructuredListInput,\n  StructuredListCell,\n  OrderedList,\n  ListItem,\n} from '@carbon/react';\n\n<PageDescription>\n\nNo accessibility annotations are needed for text inputs, but keep these considerations in mind if you are modifying Carbon or creating a custom component.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>What Carbon provides</AnchorLink>\n<AnchorLink>Development considerations</AnchorLink>\n\n</AnchorLinks>\n\n## What Carbon provides\n\nCarbon bakes keyboard operation into its components, improving the experience of blind users and others who operate via the keyboard. Carbon incorporates many other accessibility considerations, some of which are described below.\n\n### Keyboard navigation\n\nCarbon’s text inputs and text areas replicate the default HTML component operation. Each input field is a tab stop, as are any preceding information icons (which open with `Enter`/`Space` and close with `Esc`). For password inputs, Carbon provides a keyboard-operable ability to toggle the password value’s visibility using `Enter` or `Space`.\n\n<Row>\n<Column colLg={8}>\n\n![example of text input keyboard navigation](images/text-input-accessibility-1.png)\n\n<Caption>\n  Each input is a tab stop, as are any information icons.\n</Caption>\n\n</Column>\n</Row>\n\n\n### Keyboard interaction\n\nOn focus, users can type directly into the input field. Any existing text in the input is highlighted on focus and will be replaced when the user begins typing. (Existing text in a text area is not highlighted on focus; instead the cursor is placed at the start or the user’s prior point of interaction.) Users can interact inside text inputs and text areas using standard arrow keys and modifiers (`Ctrl` for Windows, `Option` for Mac).\n\n<Row>\n<Column colLg={8}>\n\n![example of keyboard operation in text area](images/text-input-accessibility-2.png)\n\n<Caption>\n  Users can move around in text inputs and text areas using arrows keys and modifiers.\n</Caption>\n\n</Column>\n</Row>\n\n### Labeling and helper text\n\nCarbon programmatically surfaces both the input's label and any helper text to assistive technologies such as screen readers. Any error messages for text inputs are also accessibly revealed.\n\n<Row>\n<Column colLg={8}>\n\n![Date of release label and date input helper text are shown as being accessibly provided](images/text-input-accessibility-3.png)\n\n<Caption>\n  Labels and helper text are accessibly provided.\n</Caption>\n\n</Column>\n</Row>\n\n## Development considerations\n\nKeep these considerations in mind if you are modifying Carbon or creating a custom component.\n- Labels are properly associated with inputs using the `for` attribute.\n- Helper text is surfaced to assistive technology through `aria-describedby`.","type":"Mdx","contentDigest":"d9e7fd76bfb395783477c33ebf4b7520","owner":"gatsby-plugin-mdx","counter":4008},"frontmatter":{"title":"Text input","description":"Text inputs enable the user to interact with and input content and data. This component can be used for long and short form entries.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Text input\ndescription:\n  Text inputs enable the user to interact with and input content and data. This\n  component can be used for long and short form entries.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\nimport {\n  StructuredListWrapper,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListRow,\n  StructuredListInput,\n  StructuredListCell,\n  OrderedList,\n  ListItem,\n} from '@carbon/react';\n\n<PageDescription>\n\nNo accessibility annotations are needed for text inputs, but keep these considerations in mind if you are modifying Carbon or creating a custom component.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>What Carbon provides</AnchorLink>\n<AnchorLink>Development considerations</AnchorLink>\n\n</AnchorLinks>\n\n## What Carbon provides\n\nCarbon bakes keyboard operation into its components, improving the experience of blind users and others who operate via the keyboard. Carbon incorporates many other accessibility considerations, some of which are described below.\n\n### Keyboard navigation\n\nCarbon’s text inputs and text areas replicate the default HTML component operation. Each input field is a tab stop, as are any preceding information icons (which open with `Enter`/`Space` and close with `Esc`). For password inputs, Carbon provides a keyboard-operable ability to toggle the password value’s visibility using `Enter` or `Space`.\n\n<Row>\n<Column colLg={8}>\n\n![example of text input keyboard navigation](images/text-input-accessibility-1.png)\n\n<Caption>\n  Each input is a tab stop, as are any information icons.\n</Caption>\n\n</Column>\n</Row>\n\n\n### Keyboard interaction\n\nOn focus, users can type directly into the input field. Any existing text in the input is highlighted on focus and will be replaced when the user begins typing. (Existing text in a text area is not highlighted on focus; instead the cursor is placed at the start or the user’s prior point of interaction.) Users can interact inside text inputs and text areas using standard arrow keys and modifiers (`Ctrl` for Windows, `Option` for Mac).\n\n<Row>\n<Column colLg={8}>\n\n![example of keyboard operation in text area](images/text-input-accessibility-2.png)\n\n<Caption>\n  Users can move around in text inputs and text areas using arrows keys and modifiers.\n</Caption>\n\n</Column>\n</Row>\n\n### Labeling and helper text\n\nCarbon programmatically surfaces both the input's label and any helper text to assistive technologies such as screen readers. Any error messages for text inputs are also accessibly revealed.\n\n<Row>\n<Column colLg={8}>\n\n![Date of release label and date input helper text are shown as being accessibly provided](images/text-input-accessibility-3.png)\n\n<Caption>\n  Labels and helper text are accessibly provided.\n</Caption>\n\n</Column>\n</Row>\n\n## Development considerations\n\nKeep these considerations in mind if you are modifying Carbon or creating a custom component.\n- Labels are properly associated with inputs using the `for` attribute.\n- Helper text is surfaced to assistive technology through `aria-describedby`.","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/components/text-input/accessibility.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","338751667","768070550"]}